--- a/t/Util.pm
+++ b/t/Util.pm
@@ -117,6 +117,7 @@
     if ($pid != 0) {
         print STDERR "spawning $args{argv}->[0]... ";
         if ($args{is_ready}) {
+            sleep 1;
             while (1) {
                 if ($args{is_ready}->()) {
                     print STDERR "done\n";
--- a/t/50status.t
+++ b/t/50status.t
@@ -54,7 +54,7 @@
         status: ON
 EOT
     my $resp = `curl --silent -o /dev/stderr 'http://127.0.0.1:$server->{port}/beeb98fcf148317be5fe5d763c658bc9ea9c087a' 2>&1 > /dev/null`;
-    my $resp = `curl --silent -o /dev/stderr 'http://127.0.0.1:$server->{port}/s/json?show=events' 2>&1 > /dev/null`;
+    $resp = `curl --silent -o /dev/stderr 'http://127.0.0.1:$server->{port}/s/json?show=events' 2>&1 > /dev/null`;
     my $jresp = decode_json("$resp");
     is $jresp->{'connections'}, undef, "Connections not present";
     is $jresp->{'requests'}, undef, "Requests not present";
--- a/t/50reverse-proxy-added-headers.t
+++ b/t/50reverse-proxy-added-headers.t
@@ -14,7 +14,7 @@
 my $upstream_port = empty_port();
 
 my $guard = spawn_server(
-    argv     => [ qw(plackup -s Starlet --keepalive-timeout 100 --access-log /dev/null --listen), $upstream_port, ASSETS_DIR . "/upstream.psgi" ],
+    argv     => [ qw(plackup -s Starlet --keepalive-timeout 100 --access-log /dev/null --listen), ":$upstream_port", ASSETS_DIR . "/upstream.psgi" ],
     is_ready =>  sub {
         check_port($upstream_port);
     },
--- a/t/50reverse-proxy-disconnected-keepalive.t
+++ b/t/50reverse-proxy-disconnected-keepalive.t
@@ -63,7 +63,8 @@
     my $addr = shift;
     spawn_server(
         argv     => [
-            qw(plackup -s Starlet --max-keepalive-reqs 100 --keepalive-timeout 1 --access-log /dev/null --listen), $addr,
+            qw(plackup -s Starlet --max-keepalive-reqs 100 --keepalive-timeout 1 --access-log /dev/null --listen),
+            $addr =~ /^\d+$/ ? ":$addr" : $addr,
             ASSETS_DIR . "/upstream.psgi"
         ],
         is_ready => sub {
--- a/t/50servername.t
+++ b/t/50servername.t
@@ -56,7 +56,7 @@
 my $upstream_port = empty_port();
 
 my $upstream = spawn_server(
-	argv     => [ qw(plackup -s Starlet --keepalive-timeout 100 --access-log /dev/null --listen), $upstream_port, ASSETS_DIR . "/upstream.psgi" ],
+	argv     => [ qw(plackup -s Starlet --keepalive-timeout 100 --access-log /dev/null --listen), ":$upstream_port", ASSETS_DIR . "/upstream.psgi" ],
 	is_ready =>  sub {
 		check_port($upstream_port);
 	},
--- a/t/50reverse-proxy-https.t
+++ b/t/50reverse-proxy-https.t
@@ -30,8 +30,8 @@
       "/no-verify":
         proxy.reverse.url: https://127.0.0.1:$upstream_port
         proxy.ssl.verify-peer: OFF
-      "/wikipedia":
-        proxy.reverse.url: https://en.wikipedia.org/wiki/Main_Page
+      "/official":
+        proxy.reverse.url: https://h2o.examp1e.net
 EOT
     run_with_curl($server, sub {
         my ($proto, $port, $curl) = @_;
@@ -39,7 +39,7 @@
         like $resp, qr{^HTTP/[^ ]* 502\s}is;
         $resp = `$curl --silent --dump-header /dev/stderr --max-redirs 0 $proto://127.0.0.1:$port/no-verify/ 2>&1 > /dev/null`;
         unlike $resp, qr{^HTTP/[^ ]* 502\s}is;
-        $resp = `$curl --silent --dump-header /dev/stderr --max-redirs 0 $proto://127.0.0.1:$port/wikipedia/ 2>&1 > /dev/null`;
+        $resp = `$curl --silent --dump-header /dev/stderr --max-redirs 0 $proto://127.0.0.1:$port/official/ 2>&1 > /dev/null`;
         like $resp, qr{^HTTP/[^ ]* 200\s}is;
     });
 };
--- a/t/50internal-redirect.t
+++ b/t/50internal-redirect.t
@@ -11,7 +11,7 @@
 
 my $upstream_port = empty_port();
 my $upstream = spawn_server(
-    argv     => [ qw(plackup -s Starlet --access-log /dev/null --listen), $upstream_port, ASSETS_DIR . "/upstream.psgi" ],
+    argv     => [ qw(plackup -s Starlet --access-log /dev/null --listen), ":$upstream_port", ASSETS_DIR . "/upstream.psgi" ],
     is_ready =>  sub {
         check_port($upstream_port);
     },
--- a/t/40session-ticket.t
+++ b/t/40session-ticket.t
@@ -122,7 +122,7 @@
 sub test {
     my $lines = do {
         my $cmd_opts = (-e "$tempdir/session" ? "-sess_in $tempdir/session" : "") . " -sess_out $tempdir/session";
-        open my $fh, "-|", "openssl s_client $cmd_opts -connect 127.0.0.1:$server->{tls_port} 2>&1 < /dev/null"
+        open my $fh, "-|", "openssl s_client -tls1_2 $cmd_opts -connect 127.0.0.1:$server->{tls_port} 2>&1 < /dev/null"
             or die "failed to open pipe:$!";
         local $/;
         <$fh>;
--- a/t/40ssl-cipher-suite.t
+++ b/t/40ssl-cipher-suite.t
@@ -32,7 +32,7 @@
 );
 
 # connect to the server with AES256-SHA as the first choice, and check that AES128-SHA was selected
-my $log = `openssl s_client -cipher AES256-SHA:AES128-SHA -host 127.0.0.1 -port $port < /dev/null 2>&1`;
+my $log = `openssl s_client -tls1_2 -cipher AES256-SHA:AES128-SHA -host 127.0.0.1 -port $port < /dev/null 2>&1`;
 like $log, qr/^\s*Cipher\s*:\s*AES128-SHA\s*$/m;
 
 done_testing;
--- a/t/50access-log.t
+++ b/t/50access-log.t
@@ -178,7 +178,7 @@
         do {
             my @expected = (
                 qr{^2 - - - - - -$}is,
-                qr{^3 TLSv[0-9.]+ 0 \S+RSA\S+ (?:128|256) - -$}is,
+                qr{^3 TLSv[0-9.]+ 0 \S+(?:RSA|GCM)\S+ (?:128|256) - -$}is,
             );
             if (prog_exists("nghttp")) {
                 push @expected, +(
--- a/t/50reverse-proxy-session-resumption.t
+++ b/t/50reverse-proxy-session-resumption.t
@@ -10,6 +10,8 @@
     unless prog_exists('curl');
 plan skip_all => 'Starlet not found'
     unless system('perl -MStarlet /dev/null > /dev/null 2>&1') == 0;
+plan skip_all => 'h2o uses OpenSSL 1.1.1 or higher'
+    if server_features->{OpenSSL} =~ /1\.1\.[1-9]/;
 
 my $tempdir = tempdir(CLEANUP => 1);
 
